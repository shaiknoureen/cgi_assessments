 Pandas Questions
1.	How do you read a CSV file and display the first 10 rows?
2.	How do you find the number of rows and columns in a DataFrame?
3.	Given a DataFrame df, how do you display only the rows where age > 25?
4.	Replace all missing values in column salary with the mean salary.
5.	How do you rename the column emp_id to employee_id?
6.	How to drop duplicate rows in a DataFrame?
7.	How do you convert a column of string dates "2023-05-01" into datetime format?
8.	How to group a DataFrame by department and find the total salary for each?
9.	How do you sort a DataFrame by date in descending order?
10.	Create a new column total_marks by adding three columns: math, science, and english.
11.	How do you filter rows where column score is between 40 and 80?
12.	Display the top 3 rows with the highest values in column sales.
13.	Find the average, min, and max of the price column using a single function.
14.	How to set a column (e.g., date) as the index of a DataFrame?
15.	Convert a categorical column gender (with values M/F) into numeric using mapping (M → 1, F → 0).
________________________________________
 NumPy Questions
16.	Create a 1D NumPy array from 0 to 9.
17.	Create a 3x3 NumPy array filled with random integers between 1 and 100.
18.	How do you find the mean and standard deviation of a NumPy array?
19.	Given an array, replace all values greater than 50 with 50.
20.	Create a NumPy array and reshape it from 1D to 2D (e.g., 12 elements → 3x4).
21.	Find the number of even numbers in a NumPy array.
22.	How do you flatten a 2D NumPy array to 1D?
23.	Create an array of 10 random floats between 0 and 1.
24.	Multiply two NumPy arrays element-wise.
25.	Given a NumPy array, how do you find the index of the maximum value?

import pytest
import sys
def test_addition():
    assert 1 + 2 == 3
    @pytest.mark.skipif(sys.version_info<(3,9),reason="requires python 3.9 or higher")
    def test_dict_merge_operator():
        a = {"x":1}
        b = {"y": 2}
        result = a | b
        assert  result =={"x":1,"y":2}
import pytest
import sys
def test_addition():
    assert 1 + 2 == 3
    @pytest.mark.skipif(sys.version_info<(3,9),reason="requires python 3.9 or higher")
    def test_dict_merge_operator():
        a = {"x":1}
        b = {"y": 2}
        result = a | b
        assert  result =={"x":1,"y":2}


# test_calculator.py

import unittest
import calculator  # import the file to test

class TestCalculator(unittest.TestCase):

    def test_add(self):
        self.assertEqual(calculator.add(2, 3), 5)
        self.assertEqual(calculator.add(-1, 1), 0)

    def test_subtract(self):
        self.assertEqual(calculator.subtract(10, 5), 5)
        self.assertNotEqual(calculator.subtract(4, 2), 3)

# This runs the test when you run this file directly
if __name__ == '__main__':
    unittest.main()

import unittest
from bank import *
class TestBankaccount(unittest.TestCase):
  def setUp(self):
        self.acc= Bankaccount("noureen",1000)
  def test_initial_balance(self):
        self.assertEqual(self.acc.get_balance(), 1000)
  def test_deposit(self):
        self.acc.deposit(500)
        self.assertEqual(self.acc.get_balance(), 1500)
  def test_withdraw(self):
        self.acc.withdraw(300)
        self.assertEqual(self.acc.get_balance(), 700)
  def test_withdraw_insufficient_funds(self):
       with self.assertRaises(ValueError):
           self.acc.withdraw(2000)

  def test_invalid_deposit(self):
        with self.assertRaises(ValueError):
            self.acc.deposit(-100)

  def test_invalid_withdraw(self):
        with self.assertRaises(ValueError):
            self.acc.withdraw(0)
if __name__ == '__main__':
    unittest.main()


import pytest


def add(a,b):
    return a+b
def test_add():
    assert add(2,3) == 5
def subtract(a,b):
    return a-b

def test_subtract():
    assert add(2,-3) == -1


#fixture
@pytest.fixture
def sample_data():
    return {"name":"noureen","technology":"python"}
def test_sample_data(sample_data):
    assert sample_data["name"] == "noureen"

def divide(x,y):
    return x/y
def test_divide_by_zero():
    with pytest.raises(ZeroDivisionError):
        divide(10,0)
import pytest
import sys
def test_addition():
    assert 1 + 2 == 3
    @pytest.mark.skipif(sys.version_info<(3,9),reason="requires python 3.9 or higher")
    def test_dict_merge_operator():
        a = {"x":1}
        b = {"y": 2}
        result = a | b
        assert  result =={"x":1,"y":2}









