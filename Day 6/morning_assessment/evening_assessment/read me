def simple_generator():
    yield 1
    yield 2
    yield 3

gen = simple_generator() #iterates 0r iterator
print(next(gen))
print(next(gen))
print(next(gen))
#python 2 and python 3
#xrange      range

def generator():
    return 1
    #return 2
    #return 3
print(generator())
#generator with even numbers
def even_numbers(limit):
    for num in range(limit):
        if num % 2 ==0:
            yield num

for even in even_numbers(10):#0,1,2,3,4,5,6,7,8,9
    print(even,end=" ")

#generator with list comphrehension

gen = (x*x for x in range(5)) #0,1,2,3,4,1,4,9,16
for val in gen:
    print(val)

#fibonacci series
#0,1,1,2,3,5,8 #a+b= 0+1
def fibonacci(n):
    a,b = 0,1
    for xyz in range(n):
        yield a
        a,b = b,a+b #1,0+1= 2
for num in fibonacci(10):
    print(num,end=" ")

#infinite loop
def infinite_counter(start= 0):
    num1 = start
    while True:
        yield num1
        num1 += 1 #num+1
counter = infinite_counter()
for _ in range(5):
    print(next(counter),end=" ")

       numbers = [10,20,30]
it = iter(numbers)
print(next(it))
print(next(it))
print(next(it))


text = "abc"
it = iter(text)
print(next(it))
print(next(it))
print(next(it))


#range(1,3) 1,2
#counter(1,3)1,2,3
class countthree:
    def __init__(self):
        self.num = 0
    def __iter__(self):
        return self
    def __next__(self):
        if self.num>5:
            raise StopIteration
        current = self.num
        self.num += 1
        return current

it =   countthree()
for val in it:
    print(val,end=" ")

 #magic method or dunder method is used to customize the class behaviour


        #cycle() infinite repeater
from itertools import *
count = 0
for i in cycle(["a","b"]):
     if count >3:
         break
     print(i,end=" ")
     count += 1

from itertools import count,cycle

for item in chain(["a","b"],[1,2]):
    print(item, end =" ")


for item in product(["a","b"],[1,2]):
    print(item)

for p in permutations([1,2,3],2):
    print(p)

 #cycle() infinite repeater
from itertools import *
count = 0
for i in cycle(["a","b"]):
     if count >3:
         break
     print(i,end=" ")
     count += 1

from itertools import count,cycle

for item in chain(["a","b"],[1,2]):
    print(item, end =" ")


for item in product(["a","b"],[1,2]):
    print(item)

for p in permutations([1,2,3],2):
    print(p)

def square(x):
    return x*x
numbers = {1,2,3,4,5}
result = map(square,numbers)
print(set(result))


a = [1,2,3]
b = [4,5,6]
result = map(lambda x,y :x + y,a,b)
print(list(result))




















