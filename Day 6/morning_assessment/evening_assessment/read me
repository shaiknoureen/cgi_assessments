def simple_generator():
    yield 1
    yield 2
    yield 3

gen = simple_generator() #iterates 0r iterator
print(next(gen))
print(next(gen))
print(next(gen))
#python 2 and python 3
#xrange      range

def generator():
    return 1
    #return 2
    #return 3
print(generator())
#generator with even numbers
def even_numbers(limit):
    for num in range(limit):
        if num % 2 ==0:
            yield num

for even in even_numbers(10):#0,1,2,3,4,5,6,7,8,9
    print(even,end=" ")

#generator with list comphrehension

gen = (x*x for x in range(5)) #0,1,2,3,4,1,4,9,16
for val in gen:
    print(val)

#fibonacci series
#0,1,1,2,3,5,8 #a+b= 0+1
def fibonacci(n):
    a,b = 0,1
    for xyz in range(n):
        yield a
        a,b = b,a+b #1,0+1= 2
for num in fibonacci(10):
    print(num,end=" ")

#infinite loop
def infinite_counter(start= 0):
    num1 = start
    while True:
        yield num1
        num1 += 1 #num+1
counter = infinite_counter()
for _ in range(5):
    print(next(counter),end=" ")

       numbers = [10,20,30]
it = iter(numbers)
print(next(it))
print(next(it))
print(next(it))


text = "abc"
it = iter(text)
print(next(it))
print(next(it))
print(next(it))


#range(1,3) 1,2
#counter(1,3)1,2,3
class countthree:
    def __init__(self):
        self.num = 0
    def __iter__(self):
        return self
    def __next__(self):
        if self.num>5:
            raise StopIteration
        current = self.num
        self.num += 1
        return current

it =   countthree()
for val in it:
    print(val,end=" ")

 #magic method or dunder method is used to customize the class behaviour


        #cycle() infinite repeater
from itertools import *
count = 0
for i in cycle(["a","b"]):
     if count >3:
         break
     print(i,end=" ")
     count += 1

from itertools import count,cycle

for item in chain(["a","b"],[1,2]):
    print(item, end =" ")


for item in product(["a","b"],[1,2]):
    print(item)

for p in permutations([1,2,3],2):
    print(p)

 #cycle() infinite repeater
from itertools import *
count = 0
for i in cycle(["a","b"]):
     if count >3:
         break
     print(i,end=" ")
     count += 1

from itertools import count,cycle

for item in chain(["a","b"],[1,2]):
    print(item, end =" ")


for item in product(["a","b"],[1,2]):
    print(item)

for p in permutations([1,2,3],2):
    print(p)

def square(x):
    return x*x
numbers = {1,2,3,4,5}
result = map(square,numbers)
print(set(result))


a = [1,2,3]
b = [4,5,6]
result = map(lambda x,y :x + y,a,b)
print(list(result))

#python is a learning language and is easily understanble

#1.create a file
#2.read a filehandling
#3# python :1 dictionary
#4 counter
with open("word_frequency_counter.txt",'w') as file:
    file.write("python is easy to learn. \n")
    file.write("learning python is fun and rewarding. \n")
    file.write("python is easy and powerful. \n")

word_count = {}

with open("word_frequency_counter.txt",'r') as file:
    for line in file:
        words = line.strip().split()
        for word in words:
            word = word.lower().strip('.,?!')
            word_count[word] = word_count.get(word,0)+1
print("word frequency in the file:")
for word,count in word_count.items():
    print(f"{word}:{count}")


def divide(a,b):
    try: #run the risky code
     result = a/b
    except ZeroDivisionError: #runs if error happens
     print("cannot divide by zero")
    else:
     print(f"division successful result :{result}") #if there is no error
    finally:#always runs,whether error occurs or not
        print("division operation completed")


print(divide(10,0))


#read,write,update,delete

#suntax : file = open("exp.txt",mode)

#mode
#1. read  'r'
#2.write  'w'
#3.append  'a'
#4. 'x' fails if file exists
#5 binary 'b'
#6text mode 't'
#7 read & write '+'

#write to a file and read it

with open('sample.txt','w') as file:
    file.write("hello python!\n")
    file.write("this is file I/O example")
with open('sample.txt','r') as file:
    content = file.read()
    print(content)


#append data and read the file
with open('sample.txt','a') as file:
    file.write("\n this line added as a new line with append mode")
with open('sample.txt','r') as file:
    print(file.read())




with open('sample.txt','r') as file:
    for i in file:
        print(i.strip())

import os
if os.path.exists('sample.txt'):
    print("file exists,deleting it now")
    os.remove('sample.txt')
else:
    print("file does not exist")



def access_file(username):
    allowed_users =['user1','user2']
    if username in allowed_users:
        with open('linesexample.txt', 'r') as file:
            print(file.read(20))

    else:
        print("Access Denied")

access_file('user1')
access_file('guest')


with open('sample.txt','w') as file:
    file.write("hello python!\n")
    file.write("this is file I/O example \n")
    file.write("this is file I/O example \n")
    file.write("this is file I/O example \n")
    file.write("this is file I/O example \n")
with open('sample.txt','r') as file:
    content = file.readlines(1)
    print(content)


def access_file(username):
    allowed_users =['user1','user2']
    if username in allowed_users:
        with open('linesexample.txt', 'r') as file:
            file.write("hello python!\n")
            file.write("this is file I/O example \n")
            file.write("this is file I/O example \n")
            file.write("this is file I/O example \n")
            file.write("this is file I/O example \n")
            print(file.read())

    else:
        print("Access Denied")

access_file('user1')
access_file('guest')

















