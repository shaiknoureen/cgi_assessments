#basic data structure
#1d array with labels
import pandas as pd
data = pd.Series([10,20,30])
#print(data)

#2d table with rows & columns

var = {'name':["mayuri","vyshnavi","keerthi","amitha","vidya","raksha","abhigna","gagana"],"age":[5,30,26,15,12,18,19,20],"city":["delhi","bangalore","chennai","chennai","mumbai","hyderabad","pune","kolkatta"]}
#dataframe
df = pd.DataFrame(var)
#print(df)

#df = pd.read_csv('file.csv')
print(df.head(3)) # first 5 rows
print(df.tail(3))
print(df.shape)
print(df.dtypes)
print(df.columns)
print(df.describe())
print(df['name'])
print(df["age"]>15)

df["salary"] = [1000,2000,3000,500,700,800,5000,900]
print(df)

df.drop("city",axis =1 ,inplace = True)
print(df)

sorted_df = df.sort_values(by='age',ascending = True)
print(sorted_df)

import pandas as pd
df = pd.read_excel('data.xlsx')

new_data = pd.DataFrame({'Name':["shaik","david","rahul","ammu"],"Age":[20,30,35,None],"salary":[55000,25000,35000,None]})
df = pd.concat([df,new_data],ignore_index=True)
df["bonus"] = df["salary"]* 0.10
df_unique = df.drop_duplicates()
df.to_excel('data.xlsx',index = False)# to overwrite the existing data in to the table
df_filled = df.fillna({"name":"ammu","Age":25,"salary":70000})
print("After replacing none values:")
print(df_filled)
print(df_unique)
print(df_filled)
print(df.head(4))

import pandas as pd
new_data = pd.DataFrame({'Name':["shaik","david","rahul","ammu"],"Age":[20,30,25,35],"salary":[55000,25000,35000,60000]})
df = pd.DataFrame(new_data)
print(df)
df_clean = df.dropna()
print(df_clean)

import pandas as pd
data = {"students":["shaik","david","rahul","ammu"],"age":[20,30,25,35],"marks":[550,250,350,600]}
df = pd.DataFrame(data,index=['a','b','c','d'])
print(df)
print(df.loc['b'])
print(df.loc[['b','c']])
print(df.loc['b',["students","marks"]])
print(df.loc[df["age"]>20])
print(df.loc["a","age"] != 20)
print(df.loc[ :"country"] == 'india')





import numpy as np
arr1 = np.array([1,2,3,4,5,6])
arr2 = np.array([10,20,30,40,50,60])
print("array 1:",arr1)
print("array 2:",arr2)

#array operation
sum_arr = arr1+arr2
print("\n sum of arrays:",sum_arr)
#2d array
matrix = np.array([[1,2],[3,4],[5,6]])
print("\n 2D Array(Matrix): \n:",matrix)

#generate arrays using functions
zeros = np.zeros((4,3))
ones = np.ones((4,3))
randoms = np.random.rand(3,3)

print("\n Zeros: \n",zeros)
print("\n ones: \n",ones)
print("\n random values: \n",randoms)

#reshape and indexing
reshaped = np.arange(12).reshape(2,6)
print("\n reshaped array:\n",reshaped)
print("element at row 3 ,col3:",reshaped[1,2])

#handling NaN values
nan_arr = np.array([1,2,np.nan,4,np.nan])
print("\n array with nan:",nan_arr)
print("is NaN:",np.isnan(nan_arr))

nan_arr_clean =np.nan_to_num(nan_arr,nan=10.0)
print("\n NaN is replaced by zero:",nan_arr_clean)




